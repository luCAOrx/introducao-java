#===========ENCAPSULAMENTO============#

O significado de encapsulamento é garantir que os dados "confidenciais" sejam ocultados dos usuários. Para conseguir isso, você deve:

    *declarar variáveis ​​/ atributos de classe como private (somente acessíveis dentro da mesma classe).
    *fornecer métodos setter e getter públicos para acessar e atualizar o valor de uma variável private.

 OBTER E DEFINIR

 Você aprendeu no capítulo anterior que variáveis private só podem ser acessadas dentro da mesma classe (uma classe externa não tem acesso a ela). No entanto, é possível acessá-los se fornecermos métodos getter e setter públicos.

 O método get retorna o valor da variável e o método set define o valor.

 A sintaxe para ambos é que eles começam com get ou set , seguido pelo nome da variável, com a primeira letra maiúscula, EX:

public class Person {
  private String name; // private = acesso restrito

  // Getter
  public String getName() {
    return name;
  }

  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}  

#================EXEMPLO EXPLICADO======================#

O método get retorna o valor do name da variável.

O método set usa um parâmetro ( newName ) e o atribui à variável name . A palavra-chave this é usada para se referir ao objeto atual.

No entanto, como a variável de name é declarada como private , não podemos acessá-la fora dessa classe, EX:

public class MyClass {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.name = "John";  // error
    System.out.println(myObj.name); // error 
  }
} 

Se a variável foi declarada como public , esperamos a seguinte saída:

John

No entanto, quando tentamos acessar uma variável private , recebemos um erro:

MyClass.java:4: error: name has private access in Person
    myObj.name = "John";
         ^
MyClass.java:5: error: name has private access in Person
    System.out.println(myObj.name);
                  ^
2 errors

Em vez disso, usamos os métodos getName() e setName() para acessar e atualizar a variável, EX:

public class MyClass {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.setName("John"); // Set the value of the name variable to "John"
    System.out.println(myObj.getName());
  }
}

// Outputs "John" 

#================POR QUE ENCAPSULAMENTO?=================#

    *Melhor controle de atributos e métodos de classe.
    *Variáveis ​​de classe podem ser feitas somente para leitura (se você omitir o método set ) ou somente para gravação (se você omitir o método get ).
    *Flexível: o programador pode alterar uma parte do código sem afetar outras partes.
    *Maior segurança dos dados.
